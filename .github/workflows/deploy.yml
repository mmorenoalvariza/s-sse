name: Deploy Spring Boot to Elastic Beanstalk

on:
        push:
                branches:
                        - main # Or your desired branch

jobs:
        build-and-deploy:
                runs-on: ubuntu-latest
                steps:
                        - name: Checkout code
                          uses: actions/checkout@v4

                        - name: Set up Java
                          uses: actions/setup-java@v4
                          with:
                                  distribution: 'corretto' # Or your preferred Java distribution
                                  java-version: '17' # Or your application's Java version

                        - name: Build with Maven
                          run: mvn clean package -DskipTests

                        - name: Create Elastic Beanstalk Application
                          run: |
                                  if ! aws elasticbeanstalk describe-applications --application-names sboot-demo-app --query 'Applications[?ApplicationName==`sboot-demo-app`]' --output text | grep -q sboot-demo-app; then
                                    echo "Application does not exist, creating..."
                                    aws elasticbeanstalk create-application --application-name sboot-demo-app --description "Spring Boot Demo Application"
                                  else
                                    echo "Application already exists"
                                  fi
                          env:
                                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                                  AWS_DEFAULT_REGION: us-east-1

                        - name: Create IAM Roles and Instance Profile
                          run: |
                                  # Create EC2 IAM role if it doesn't exist
                                  if ! aws iam get-role --role-name aws-elasticbeanstalk-ec2-role 2>/dev/null; then
                                    echo "Creating EC2 IAM role..."
                                    aws iam create-role --role-name aws-elasticbeanstalk-ec2-role --assume-role-policy-document '{
                                      "Version": "2012-10-17",
                                      "Statement": [
                                        {
                                          "Effect": "Allow",
                                          "Principal": {
                                            "Service": "ec2.amazonaws.com"
                                          },
                                          "Action": "sts:AssumeRole"
                                        }
                                      ]
                                    }'
                                    
                                    # Attach required policies
                                    aws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
                                    aws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
                                    aws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
                                    
                                    # Create instance profile
                                    aws iam create-instance-profile --instance-profile-name aws-elasticbeanstalk-ec2-role
                                    aws iam add-role-to-instance-profile --instance-profile-name aws-elasticbeanstalk-ec2-role --role-name aws-elasticbeanstalk-ec2-role
                                  else
                                    echo "EC2 IAM role already exists"
                                  fi
                                  
                                  # Create service role if it doesn't exist
                                  if ! aws iam get-role --role-name aws-elasticbeanstalk-service-role 2>/dev/null; then
                                    echo "Creating service IAM role..."
                                    aws iam create-role --role-name aws-elasticbeanstalk-service-role --assume-role-policy-document '{
                                      "Version": "2012-10-17",
                                      "Statement": [
                                        {
                                          "Effect": "Allow",
                                          "Principal": {
                                            "Service": "elasticbeanstalk.amazonaws.com"
                                          },
                                          "Action": "sts:AssumeRole"
                                        }
                                      ]
                                    }'
                                    
                                    # Attach service role policy
                                    aws iam attach-role-policy --role-name aws-elasticbeanstalk-service-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
                                    aws iam attach-role-policy --role-name aws-elasticbeanstalk-service-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
                                  else
                                    echo "Service IAM role already exists"
                                  fi
                                  
                                  echo "Waiting for roles to propagate..."
                                  sleep 10
                          env:
                                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                                  AWS_DEFAULT_REGION: us-east-1

                        - name: Create Elastic Beanstalk Environment
                          run: |
                                  if ! aws elasticbeanstalk describe-environments --application-name sboot-demo-app --environment-names sboot-demo-env-2 --query 'Environments[?EnvironmentName==`sboot-demo-env-2`]' --output text | grep -q sboot-demo-env-2; then
                                    echo "Environment does not exist, creating..."
                                    SOLUTION_STACK="64bit Amazon Linux 2023 v4.6.4 running Corretto 17"
                                    echo "Using solution stack: $SOLUTION_STACK"
                                    aws elasticbeanstalk create-environment \
                                      --application-name sboot-demo-app \
                                      --environment-name sboot-demo-env-2 \
                                      --solution-stack-name "$SOLUTION_STACK" \
                                      --description "Spring Boot Demo Environment" \
                                      --option-settings \
                                        Namespace=aws:autoscaling:launchconfiguration,OptionName=IamInstanceProfile,Value=aws-elasticbeanstalk-ec2-role \
                                        Namespace=aws:elasticbeanstalk:environment,OptionName=ServiceRole,Value=aws-elasticbeanstalk-service-role
                                    echo "Waiting for environment to be ready..."
                                    aws elasticbeanstalk wait environment-exists --environment-names sboot-demo-env-2
                                    echo "Waiting for environment to finish updating..."
                                    aws elasticbeanstalk wait environment-updated --environment-names sboot-demo-env-2
                                  else
                                    echo "Environment already exists"
                                  fi
                          env:
                                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                                  AWS_DEFAULT_REGION: us-east-1

                        - name: Verify Environment Status
                          run: |
                                  echo "Checking environment status before deployment..."
                                  aws elasticbeanstalk describe-environments --environment-names sboot-demo-env-2 --query 'Environments[0].[EnvironmentName,Status,Health]' --output table
                          env:
                                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                                  AWS_DEFAULT_REGION: us-east-1

                        - name: Deploy to Elastic Beanstalk
                          uses: einaregilsson/beanstalk-deploy@v21
                          with:
                                  aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                                  aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                                  application_name: sboot-demo-app
                                  environment_name: sboot-demo-env-2
                                  version_label: ${{ github.sha }}
                                  region: us-east-1
                                  deployment_package: target/demo-0.0.1-SNAPSHOT.jar